[["distance-calculation-in-microbiome-data-analysis.html", "6 Distance Calculation in Microbiome Data Analysis 6.1 Import processed and transformed data objects 6.2 Phyloseq Bray-Curtis Dissimilarity 6.3 Phyloseq Extra Bray-Curtis Dissimilarity 6.4 Confirm computed Bray-Curtis distance objects 6.5 Jaccard Distance 6.6 Confirm computed Jaccard distance objects 6.7 Euclidean Distance 6.8 Confirm computed Euclidean distance objects 6.9 Aitchison Distance 6.10 Confirm computed Aitchison distance objects", " 6 Distance Calculation in Microbiome Data Analysis Calculating distance matrices between samples using appropriate metrics is a fundamental step in data preprocessing. This practice efficiently captures the similarity or dissimilarity between samples, laying the groundwork for subsequent analysis and dimensionality reduction techniques such as PCA, MDS, or t-SNE. 6.1 Import processed and transformed data objects set.seed(110912) library(phyloseq) library(microbiome) library(vegan) load(&quot;data/ps_transformed.rda&quot;, verbose = TRUE) Loading objects: ps_asin ps_identity ps_compositional ps_z_otu ps_z_sample ps_log10 ps_log10p ps_clr ps_shift ps_scale load(&quot;data/phyloseq_objects.rda&quot;, verbose = TRUE) Loading objects: ps_GlobalPatterns ps_dietswap ps_caporaso ps_kostic_crc load(&quot;data/phyloseq_extra_objects.rda&quot;, verbose = TRUE) Loading objects: psextra_clr_dietswap psextra_id_dietswap psextra_log10p_dietswap 6.2 Phyloseq Bray-Curtis Dissimilarity The Bray-Curtis dissimilarity calculates the dissimilarity between two samples based on the relative abundances of taxa. It considers both presence and abundance information but is not sensitive to differences in abundance magnitude. library(vegan) library(dplyr) ps_asin_bray_dist &lt;- vegdist(t(otu_table(ps_asin)), method=&quot;bray&quot;) %&gt;% as.matrix() ps_identity_bray_dist &lt;- vegdist(t(otu_table(ps_identity)), method=&quot;bray&quot;) %&gt;% as.matrix ps_compositional_bray_dist &lt;- vegdist(t(otu_table(ps_compositional)), method=&quot;bray&quot;) %&gt;% as.matrix ps_z_otu_bray_dist &lt;- vegdist(t(otu_table(ps_z_otu)), method=&quot;bray&quot;) %&gt;% as.matrix ps_z_sample_bray_dist &lt;- vegdist(t(otu_table(ps_z_sample)), method=&quot;bray&quot;) %&gt;% as.matrix ps_log10_bray_dist &lt;- vegdist(t(otu_table(ps_log10)), method=&quot;bray&quot;) %&gt;% as.matrix ps_log10p_bray_dist &lt;- vegdist(t(otu_table(ps_log10p)), method=&quot;bray&quot;) %&gt;% as.matrix ps_clr_bray_dist &lt;- vegdist(t(otu_table(ps_clr)), method=&quot;bray&quot;) %&gt;% as.matrix ps_shift_bray_dist &lt;- vegdist(t(otu_table(ps_shift)), method=&quot;bray&quot;) %&gt;% as.matrix ps_scale_bray_dist &lt;- vegdist(t(otu_table(ps_scale)), method=&quot;bray&quot;) %&gt;% as.matrix save(ps_asin_bray_dist, ps_compositional_bray_dist, ps_z_otu_bray_dist, ps_z_sample_bray_dist, ps_log10_bray_dist, ps_log10p_bray_dist, ps_clr_bray_dist, ps_shift_bray_dist, ps_scale_bray_dist, file = &quot;data/bray_distances.rda&quot;) 6.3 Phyloseq Extra Bray-Curtis Dissimilarity In this section, we compute the Bray-Curtis dissimilarity distance from a phyloseq extra object. The Bray-Curtis dissimilarity distance is a measure of dissimilarity between microbial communities based on the abundance of different taxa present in each community. This analysis provides valuable insights into the compositional differences between microbial communities, which are essential for understanding microbial diversity and community structure in microbiome studies. library(vegan) library(dplyr) library(microViz) psextra_clr_asin_bray_dist &lt;- psextra_clr_dietswap %&gt;% dist_calc(dist = &quot;bray&quot;) psextra_id_asin_bray_dist &lt;- psextra_id_dietswap %&gt;% dist_calc(dist = &quot;bray&quot;) psextra_log10p_asin_bray_dist &lt;- psextra_log10p_dietswap %&gt;% dist_calc(dist = &quot;bray&quot;) save(psextra_clr_asin_bray_dist, psextra_id_asin_bray_dist, psextra_log10p_asin_bray_dist, file = &quot;data/psextra_distances.rda&quot;) 6.4 Confirm computed Bray-Curtis distance objects load(&quot;data/bray_distances.rda&quot;, verbose = T) Loading objects: ps_asin_bray_dist ps_compositional_bray_dist ps_z_otu_bray_dist ps_z_sample_bray_dist ps_log10_bray_dist ps_log10p_bray_dist ps_clr_bray_dist ps_shift_bray_dist ps_scale_bray_dist load(&quot;data/psextra_distances.rda&quot;, verbose = T) Loading objects: psextra_clr_asin_bray_dist psextra_id_asin_bray_dist psextra_log10p_asin_bray_dist 6.5 Jaccard Distance The Jaccard distance measures the dissimilarity between two samples based on the presence or absence of taxa, ignoring their abundance information. It is calculated as the ratio of the number of taxa found in only one of the samples to the total number of taxa found in both samples. library(vegan) library(dplyr) ps_asin_jaccard_dist &lt;- vegdist(t(otu_table(ps_asin)), method=&quot;jaccard&quot;) %&gt;% as.matrix() ps_identity_jaccard_dist &lt;- vegdist(t(otu_table(ps_identity)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_compositional_jaccard_dist &lt;- vegdist(t(otu_table(ps_compositional)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_z_otu_jaccard_dist &lt;- vegdist(t(otu_table(ps_z_otu)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_z_sample_jaccard_dist &lt;- vegdist(t(otu_table(ps_z_sample)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_log10_jaccard_dist &lt;- vegdist(t(otu_table(ps_log10)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_log10p_jaccard_dist &lt;- vegdist(t(otu_table(ps_log10p)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_clr_jaccard_dist &lt;- vegdist(t(otu_table(ps_clr)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_shift_jaccard_dist &lt;- vegdist(t(otu_table(ps_shift)), method=&quot;jaccard&quot;) %&gt;% as.matrix ps_scale_jaccard_dist &lt;- vegdist(t(otu_table(ps_scale)), method=&quot;jaccard&quot;) %&gt;% as.matrix save(ps_asin_jaccard_dist, ps_compositional_jaccard_dist, ps_z_otu_jaccard_dist, ps_z_sample_jaccard_dist, ps_log10_jaccard_dist, ps_log10p_jaccard_dist, ps_clr_jaccard_dist, ps_shift_jaccard_dist, ps_scale_jaccard_dist, file = &quot;data/jaccard_distances.rda&quot;) 6.6 Confirm computed Jaccard distance objects load(&quot;data/jaccard_distances.rda&quot;, verbose = T) Loading objects: ps_asin_jaccard_dist ps_compositional_jaccard_dist ps_z_otu_jaccard_dist ps_z_sample_jaccard_dist ps_log10_jaccard_dist ps_log10p_jaccard_dist ps_clr_jaccard_dist ps_shift_jaccard_dist ps_scale_jaccard_dist 6.7 Euclidean Distance The Euclidean distance calculates the straight-line distance between two samples in a multidimensional space based on their abundance profiles. It considers differences in both presence and abundance of taxa. library(vegan) library(dplyr) ps_asin_euclidean_dist &lt;- vegdist(t(otu_table(ps_asin)), method=&quot;euclidean&quot;) %&gt;% as.matrix() ps_identity_euclidean_dist &lt;- vegdist(t(otu_table(ps_identity)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_compositional_euclidean_dist &lt;- vegdist(t(otu_table(ps_compositional)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_z_otu_euclidean_dist &lt;- vegdist(t(otu_table(ps_z_otu)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_z_sample_euclidean_dist &lt;- vegdist(t(otu_table(ps_z_sample)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_log10_euclidean_dist &lt;- vegdist(t(otu_table(ps_log10)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_log10p_euclidean_dist &lt;- vegdist(t(otu_table(ps_log10p)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_clr_euclidean_dist &lt;- vegdist(t(otu_table(ps_clr)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_shift_euclidean_dist &lt;- vegdist(t(otu_table(ps_shift)), method=&quot;euclidean&quot;) %&gt;% as.matrix ps_scale_euclidean_dist &lt;- vegdist(t(otu_table(ps_scale)), method=&quot;euclidean&quot;) %&gt;% as.matrix save(ps_asin_euclidean_dist, ps_compositional_euclidean_dist, ps_z_otu_euclidean_dist, ps_z_sample_euclidean_dist, ps_log10_euclidean_dist, ps_log10p_euclidean_dist, ps_clr_euclidean_dist, ps_shift_euclidean_dist, ps_scale_euclidean_dist, file = &quot;data/euclidean_distances.rda&quot;) 6.8 Confirm computed Euclidean distance objects load(&quot;data/euclidean_distances.rda&quot;, verbose = T) Loading objects: ps_asin_euclidean_dist ps_compositional_euclidean_dist ps_z_otu_euclidean_dist ps_z_sample_euclidean_dist ps_log10_euclidean_dist ps_log10p_euclidean_dist ps_clr_euclidean_dist ps_shift_euclidean_dist ps_scale_euclidean_dist 6.9 Aitchison Distance The Aitchison distance, also known as the compositional distance or log-ratio distance, is specifically designed for compositional data such as microbiome abundance data. It calculates the dissimilarity between two samples based on the log-ratio transformations of their compositional vectors, providing meaningful comparisons between samples while addressing the compositional constraints inherent in relative abundance data. Computing aitchison using microViz packages library(microViz) library(dplyr) # ps_identity_aitchison_dists &lt;- ps_asin %&gt;% dist_calc(&quot;aitchison&quot;) ps_GlobalPatterns_aitchison_dists &lt;- ps_GlobalPatterns %&gt;% dist_calc(&quot;aitchison&quot;) ps_dietswap_aitchison_dists &lt;- ps_dietswap %&gt;% dist_calc(&quot;aitchison&quot;) ps_kostic_crc_aitchison_dists &lt;- ps_kostic_crc %&gt;% dist_calc(&quot;aitchison&quot;) save(ps_GlobalPatterns_aitchison_dists, ps_dietswap_aitchison_dists, ps_kostic_crc_aitchison_dists, file = &quot;data/aitchison_distances.rda&quot;) 6.10 Confirm computed Aitchison distance objects load(&quot;data/aitchison_distances.rda&quot;, verbose = T) Loading objects: ps_GlobalPatterns_aitchison_dists ps_dietswap_aitchison_dists ps_kostic_crc_aitchison_dists "],["utilizing-transformed-data.html", "7 What’s Next: Utilizing Transformed Data", " 7 What’s Next: Utilizing Transformed Data After computing distances using various methods, such as Bray-Curtis, Jaccard, Euclidean, and Aitchison, we can harness these transformed data in downstream analyses. These analyses may encompass: Beta Diversity Analysis: Comparing microbial community compositions between samples to elucidate differences or similarities. Multivariate Statistical Analysis: Assessing the significance of differences between groups of samples using methods like PERMANOVA or MANOVA. Data Visualization: Identifying patterns or clusters within the microbial community data through visualization techniques such as PCoA or NMDS plots. Correlation Analysis: Exploring relationships between microbial taxa and environmental variables to uncover potential ecological associations. By leveraging the transformed data from distance calculations, we can gain deeper insights into microbial community dynamics and their relationships with various environmental factors or experimental conditions. "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
